@startuml Architecture Diagram

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/go.puml
!include FONTAWESOME/users.puml
!include FONTAWESOME/server.puml
!include FONTAWESOME/database.puml
!include FONTAWESOME/inbox.puml

title Highload Social Network Platform - Architecture Diagram

Person(user, "User", "Platform user", $sprite="users")

System_Boundary(system, "Social Network Platform") {
    Container(webClient, "Web Client", "Browser", "Consumes API")
    Container(mobileClient, "Mobile Client", "iOS/Android", "Consumes API")
    
    Container(nginxProxy, "NGINX", "Reverse Proxy", "Routes requests and balances load")
    
    Container(webApiGateway, "Web API Gateway", "Go/Chi", "Handles HTTP requests, JWT Auth", $sprite="go")
    
    Container(usersService, "Users Service", "Go/gRPC", "User management", $sprite="go")
    Container(postsService, "Posts Service", "Go/gRPC", "Content creation & feeds", $sprite="go")
    Container(chatsService, "Chats Service", "Go/gRPC", "Messaging system", $sprite="go")
    Container(countersService, "Counters Service", "Go/gRPC", "Activity tracking", $sprite="go")
    
    Container(postsDaemon, "Posts Daemon", "Go", "Async post processing", $sprite="go")
    Container(centrifugo, "Centrifugo", "WebSocket", "Real-time updates")
    
    ContainerDb(masterDb, "MySQL Master", "Primary Database", $sprite="database")
    ContainerDb(slaveDb1, "MySQL Slave 1", "Read Replica", $sprite="database")
    ContainerDb(slaveDb2, "MySQL Slave 2", "Read Replica", $sprite="database")
    
    ContainerDb(chatDb1, "DB Node 1", "Messages Shard 1", $sprite="database")
    ContainerDb(chatDb2, "DB Node 2", "Messages Shard 2", $sprite="database")
    
    ContainerDb(redisCache, "Redis", "Caching & Pub/Sub", $sprite="database")
    ContainerDb(kafka, "Kafka", "Event Streaming", $sprite="inbox")
    
    Container(haproxy, "HAProxy", "Load Balancer", "DB Connection Pooling", $sprite="server")
    
    Container(prometheus, "Prometheus", "Metrics Collection", "Monitoring")
    Container(grafana, "Grafana", "Metrics Visualization", "Dashboards")
}

' External connections
Rel(user, webClient, "Uses", "HTTPS")
Rel(user, mobileClient, "Uses", "HTTPS")

' Client to API Gateway
Rel(webClient, nginxProxy, "Requests", "HTTPS")
Rel(mobileClient, nginxProxy, "Requests", "HTTPS")
Rel(nginxProxy, webApiGateway, "Routes to", "HTTP")

' WebSockets for real-time
Rel(webClient, centrifugo, "Connects to", "WebSocket")
Rel(mobileClient, centrifugo, "Connects to", "WebSocket")

' API Gateway to Services
Rel(webApiGateway, usersService, "Calls", "gRPC")
Rel(webApiGateway, postsService, "Calls", "gRPC")
Rel(webApiGateway, chatsService, "Calls", "gRPC")
Rel(webApiGateway, countersService, "Calls", "gRPC")

' Service to Database connections
Rel(usersService, haproxy, "Reads/Writes", "SQL")
Rel(postsService, haproxy, "Reads/Writes", "SQL")
Rel(chatsService, haproxy, "Reads/Writes", "SQL")

' Database replication
Rel(haproxy, masterDb, "Writes to", "SQL")
Rel(haproxy, slaveDb1, "Reads from", "SQL")
Rel(haproxy, slaveDb2, "Reads from", "SQL")
Rel(masterDb, slaveDb1, "Replicates to", "Binary Log")
Rel(masterDb, slaveDb2, "Replicates to", "Binary Log")

' Chat sharding
Rel(chatsService, chatDb1, "Shard 1", "SQL")
Rel(chatsService, chatDb2, "Shard 2", "SQL")

' Redis connections
Rel(postsService, redisCache, "Caches in", "TCP")
Rel(countersService, redisCache, "Stores counters", "TCP")
Rel(webApiGateway, redisCache, "Caches data", "TCP")

' Kafka messaging
Rel(postsService, kafka, "Publishes to", "TCP")
Rel(postsDaemon, kafka, "Consumes from", "TCP")
Rel(postsDaemon, redisCache, "Updates feed", "TCP")
Rel(postsDaemon, centrifugo, "Pushes updates", "HTTP API")

' Monitoring
Rel(webApiGateway, prometheus, "Exposes metrics", "HTTP")
Rel(usersService, prometheus, "Exposes metrics", "HTTP")
Rel(postsService, prometheus, "Exposes metrics", "HTTP")
Rel(chatsService, prometheus, "Exposes metrics", "HTTP")
Rel(countersService, prometheus, "Exposes metrics", "HTTP")
Rel(prometheus, grafana, "Provides metrics", "HTTP")

@enduml