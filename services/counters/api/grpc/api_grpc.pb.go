// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: services/counters/api/grpc/api.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CountersClient is the client API for Counters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CountersClient interface {
	IncrementUnreadMessageCounter(ctx context.Context, in *IncrementUnreadMessageCounterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DecrementUnreadMessageCounter(ctx context.Context, in *DecrementUnreadMessageCounterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnreadChatsCount(ctx context.Context, in *UnreadChatsCountRequest, opts ...grpc.CallOption) (*UnreadChatsCountResponse, error)
	FlushChatCounter(ctx context.Context, in *FlushChatCounterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type countersClient struct {
	cc grpc.ClientConnInterface
}

func NewCountersClient(cc grpc.ClientConnInterface) CountersClient {
	return &countersClient{cc}
}

func (c *countersClient) IncrementUnreadMessageCounter(ctx context.Context, in *IncrementUnreadMessageCounterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/counters.Counters/IncrementUnreadMessageCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countersClient) DecrementUnreadMessageCounter(ctx context.Context, in *DecrementUnreadMessageCounterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/counters.Counters/DecrementUnreadMessageCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countersClient) UnreadChatsCount(ctx context.Context, in *UnreadChatsCountRequest, opts ...grpc.CallOption) (*UnreadChatsCountResponse, error) {
	out := new(UnreadChatsCountResponse)
	err := c.cc.Invoke(ctx, "/counters.Counters/UnreadChatsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *countersClient) FlushChatCounter(ctx context.Context, in *FlushChatCounterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/counters.Counters/FlushChatCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CountersServer is the server API for Counters service.
// All implementations must embed UnimplementedCountersServer
// for forward compatibility
type CountersServer interface {
	IncrementUnreadMessageCounter(context.Context, *IncrementUnreadMessageCounterRequest) (*emptypb.Empty, error)
	DecrementUnreadMessageCounter(context.Context, *DecrementUnreadMessageCounterRequest) (*emptypb.Empty, error)
	UnreadChatsCount(context.Context, *UnreadChatsCountRequest) (*UnreadChatsCountResponse, error)
	FlushChatCounter(context.Context, *FlushChatCounterRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCountersServer()
}

// UnimplementedCountersServer must be embedded to have forward compatible implementations.
type UnimplementedCountersServer struct {
}

func (UnimplementedCountersServer) IncrementUnreadMessageCounter(context.Context, *IncrementUnreadMessageCounterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementUnreadMessageCounter not implemented")
}
func (UnimplementedCountersServer) DecrementUnreadMessageCounter(context.Context, *DecrementUnreadMessageCounterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecrementUnreadMessageCounter not implemented")
}
func (UnimplementedCountersServer) UnreadChatsCount(context.Context, *UnreadChatsCountRequest) (*UnreadChatsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnreadChatsCount not implemented")
}
func (UnimplementedCountersServer) FlushChatCounter(context.Context, *FlushChatCounterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushChatCounter not implemented")
}
func (UnimplementedCountersServer) mustEmbedUnimplementedCountersServer() {}

// UnsafeCountersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CountersServer will
// result in compilation errors.
type UnsafeCountersServer interface {
	mustEmbedUnimplementedCountersServer()
}

func RegisterCountersServer(s grpc.ServiceRegistrar, srv CountersServer) {
	s.RegisterService(&Counters_ServiceDesc, srv)
}

func _Counters_IncrementUnreadMessageCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrementUnreadMessageCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountersServer).IncrementUnreadMessageCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counters.Counters/IncrementUnreadMessageCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountersServer).IncrementUnreadMessageCounter(ctx, req.(*IncrementUnreadMessageCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counters_DecrementUnreadMessageCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecrementUnreadMessageCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountersServer).DecrementUnreadMessageCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counters.Counters/DecrementUnreadMessageCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountersServer).DecrementUnreadMessageCounter(ctx, req.(*DecrementUnreadMessageCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counters_UnreadChatsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnreadChatsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountersServer).UnreadChatsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counters.Counters/UnreadChatsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountersServer).UnreadChatsCount(ctx, req.(*UnreadChatsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counters_FlushChatCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushChatCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CountersServer).FlushChatCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/counters.Counters/FlushChatCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CountersServer).FlushChatCounter(ctx, req.(*FlushChatCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Counters_ServiceDesc is the grpc.ServiceDesc for Counters service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Counters_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "counters.Counters",
	HandlerType: (*CountersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncrementUnreadMessageCounter",
			Handler:    _Counters_IncrementUnreadMessageCounter_Handler,
		},
		{
			MethodName: "DecrementUnreadMessageCounter",
			Handler:    _Counters_DecrementUnreadMessageCounter_Handler,
		},
		{
			MethodName: "UnreadChatsCount",
			Handler:    _Counters_UnreadChatsCount_Handler,
		},
		{
			MethodName: "FlushChatCounter",
			Handler:    _Counters_FlushChatCounter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/counters/api/grpc/api.proto",
}
