version: "3.7"

services:
  app:
    build:
      dockerfile: docker/web/Dockerfile
      args:
        SERVICE_PATH: services/web/api
      context: .
    expose:
      - 8080
    depends_on:
      - chats-api
      - posts-api
      - posts-daemon
      - users-api
      - nginx
    networks:
      - otus
  app-2:
    build:
      dockerfile: docker/web/Dockerfile
      args:
        SERVICE_PATH: services/web/api
      context: .
    expose:
      - 8080
    depends_on:
      - chats-api
      - posts-api
      - posts-daemon
      - users-api
      - nginx
    networks:
      - otus
  chats-api:
    build:
      args:
        SERVICE_PATH: services/chats/api
      context: .
    ports:
      - 50051
    restart: on-failure
    depends_on:
      - mysql_master
      - mysql_slave1
      - mysql_slave2
      - db-node-1
      - db-node-2
      - haproxy
    environment:
      DATABASE_URL: "root:@(haproxy:3306)/app"
      SLAVES_URLS: "root:@(haproxy:3307)/app"
      MESSAGES_SHARDS: "messages:secret@(db-node-1:3306)/messages,messages:secret@(db-node-2:3306)/messages"
    networks:
      - otus
  posts-api:
    build:
      args:
        SERVICE_PATH: services/posts/api
      context: .
    ports:
      - 50051
    depends_on:
      - redis
      - mysql_master
      - mysql_slave1
      - mysql_slave2
      - kafka
      - haproxy
    environment:
      DATABASE_URL: "root:@(haproxy:3306)/app"
      SLAVES_URLS: "root:@(haproxy:3307)/app"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BROKERS: "kafka:9092"
    restart: on-failure
    networks:
      - otus
  posts-daemon:
    build:
      args:
        SERVICE_PATH: services/posts/daemon
      context: .
    ports:
      - 50051
    restart: on-failure
    depends_on:
      - redis
      - kafka
      - centrifugo
      - haproxy
    environment:
      DATABASE_URL: "root:@(haproxy:3306)/app"
      SLAVES_URLS: "root:@(haproxy:3307)/app"
      REDIS_URL: "redis://redis:6379"
      KAFKA_BROKERS: "kafka:9092"
    networks:
      - otus
  users-api:
    build:
      args:
        SERVICE_PATH: services/users/api
      context: .
    ports:
      - 50051
    restart: on-failure
    depends_on:
      - mysql_master
      - tarantool
      - haproxy
    environment:
      DATABASE_URL: "root:@(haproxy:3306)/app"
      SLAVES_URLS: "root:@(haproxy:3307)/app"
#      TARANTOOL_URL: "tarantool:3302"
    networks:
      - otus
  mysql_master:
    container_name: mysql_master
    image: mysql:5.7.30
    ports:
      - 3306:3306
    restart: always
    volumes:
      - mysql_master_data:/var/lib/mysql
      - ./docker/mysql/master.cnf:/etc/mysql/my.cnf
      - ./docker/mysql/master.sql:/data/start.sql
    environment:
      MYSQL_DATABASE: "app"
      MYSQL_USER: "user"
      MYSQL_PASSWORD: "password"
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    networks:
      - otus
#    command: --init-file /data/start.sql
  mysql_slave1:
    image: mysql:5.7.30
    ports:
      - 33061:3306
    restart: always
    depends_on:
      - mysql_master
    volumes:
      - mysql_slave1_data:/var/lib/mysql
      - ./docker/mysql/slave1.cnf:/etc/mysql/my.cnf
      - ./docker/mysql/slave.sql:/data/start.sql
    environment:
      MYSQL_DATABASE: "app"
      MYSQL_USER: "user"
      MYSQL_PASSWORD: "password"
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    networks:
      - otus
    command: --init-file /data/start.sql
  mysql_slave2:
    image: mysql:5.7.30
    ports:
      - 33062:3306
    restart: always
    depends_on:
      - mysql_master
    volumes:
      - mysql_slave2_data:/var/lib/mysql
      - ./docker/mysql/slave2.cnf:/etc/mysql/my.cnf
      - ./docker/mysql/slave.sql:/data/start.sql
    environment:
      MYSQL_DATABASE: "app"
      MYSQL_USER: "user"
      MYSQL_PASSWORD: "password"
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    networks:
      - otus
    command: --init-file /data/start.sql
  db-node-1:
    build:
      context: docker/mysql
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: messages
      MYSQL_USER: messages
      MYSQL_PASSWORD: secret
      MYSQL_ROOT_PASSWORD: '1'
    command: >
      --init-file /data/start.sql
      --sql-mode='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
      --general-log=ON
      --log-queries-not-using-indexes=ON
    ports:
      - 3360:3306
    volumes:
      - db-node-1-data:/var/lib/mysql
      - ./docker/mysql/messages.sql:/data/start.sql
    networks:
      - otus
  db-node-2:
    build:
      context: docker/mysql
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: messages
      MYSQL_USER: messages
      MYSQL_PASSWORD: secret
      MYSQL_ROOT_PASSWORD: '1'
    command: >
      --init-file /data/start.sql
      --sql-mode='STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
      --general-log=ON
      --log-queries-not-using-indexes=ON
    ports:
      - 3361:3306
    volumes:
      - db-node-2-data:/var/lib/mysql
      - ./docker/mysql/messages.sql:/data/start.sql
    networks:
      - otus
  prometheus:
    build:
      context: .
      dockerfile: docker/prometheus/Dockerfile
    ports:
      - 9090:9090
    networks:
      - otus
  cadvisor:
    image: gcr.io/google-containers/cadvisor:latest
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
    networks:
      - otus
  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_data_provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    expose:
      - 3000
    ports:
      - 3000:3000
    labels:
      org.label-schema.group: "monitoring"
    networks:
      - otus
  redis:
    healthcheck:
      interval: 30s
      retries: 3
      test: [ "CMD", "redis-cli","ping" ]
      timeout: 10s
    image: redis:5
    ports:
      - 6379:6379
    restart: unless-stopped
    networks:
      - otus
  zookeeper:
    image: zookeeper:3.6.1
    restart: unless-stopped
    networks:
      - otus
  kafka:
    depends_on:
      - zookeeper
    environment:
      JMX_PORT: 9999
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    image: wurstmeister/kafka:2.11-2.0.1
    ports:
      - 9092:9092
    restart: unless-stopped
    networks:
      - otus
  tarantool:
    build:
      context: .
      dockerfile: docker/tarantool/Dockerfile
    volumes:
      - tarantool_data:/var/lib/tarantool
      - ./docker/tarantool/app.lua:/usr/local/etc/tarantool/instances.enabled/app.lua
      - ./docker/tarantool/app.lua:/usr/local/etc/tarantool/available.enabled/app.lua
    ports:
      - 3301:3301
      - 3302:3302
    networks:
      - otus
  mysql_tarantool_replication:
    build:
      context: .
      dockerfile: docker/mysql_tarantool_replication/Dockerfile
    volumes:
      - ./docker/mysql_tarantool_replication/replicator.yml:/usr/local/etc/replicator.yml
    depends_on:
      - tarantool
      - mysql_master
    privileged: true
    networks:
      - otus
    command: >
      bash -c "cd /usr/local/sbin
      && ./replicatord -c /usr/local/etc/replicator.yml"
  centrifugo:
    container_name: centrifugo
    image: centrifugo/centrifugo:latest
    volumes:
      - ./docker/centrifugo/config.json:/centrifugo/config.json
    command: centrifugo -c config.json
    ports:
      - 8000:8000
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    networks:
      - otus
  haproxy:
    image: haproxy:2.1.7
    container_name: haproxy
    restart: "no"
    volumes:
      - "./docker/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg"
    ports:
      - "4080:80"
      - "8404:8404"
      - 3306
      - 3307
    depends_on:
      - mysql_master
      - mysql_slave1
      - mysql_slave2
    networks:
      - otus
  nginx:
    image: nginx:1.19.0
    container_name: nginx
    restart: on-failure
    networks:
      - otus
    volumes:
      - "./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf"
    ports:
      - "80:80"
      - "4098:8080"
networks:
  otus:
    driver: bridge
volumes:
  mysql_master_data:
  mysql_slave1_data:
  mysql_slave2_data:
  db-node-1-data:
  db-node-2-data:
  grafana_data:
  grafana_data_provisioning:
  tarantool_data:
